plugins {
    id 'org.springframework.boot' version '2.3.0.M4'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'net.minecrell.licenser' version '0.4.1'
//    id 'com.github.johnrengelman.processes' version '0.5.0'
//    id 'org.springdoc.openapi-gradle-plugin' version '1.0.0'
    id 'java'
    id 'war'
}

group = 'at.tgm'
version = '1.0'
sourceCompatibility = JavaVersion.VERSION_11

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://repo.spring.io/milestone' }
//    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ["target/generated-snippets", "src/main/resources"]
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-ldap'
//    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.plugin:spring-plugin-core'
    implementation "io.jsonwebtoken:jjwt-api:${jjwt_version}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwt_version}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwt_version}"
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.3.9'
//    implementation 'org.springdoc:springdoc-openapi-data-rest:1.3.9'
    implementation 'org.springdoc:springdoc-openapi-security:1.3.9'
    /*implementation "io.springfox:springfox-swagger2:${springfox_version}"
    implementation "io.springfox:springfox-swagger-ui:${springfox_version}"
    implementation "io.springfox:springfox-spring-webflux:${springfox_version}"
    implementation "io.springfox:springfox-spring-integration-webflux:${springfox_version}"
    implementation "io.springfox:springfox-data-rest:${springfox_version}"*/
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'dev.miku:r2dbc-mysql'
    runtimeOnly 'io.r2dbc:r2dbc-h2'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

springBoot {
    mainClassName = 'at.tgm.schulplaner.TgmSchulplanerApplication'
}

license {
    header = project.file('LICENSE_HEADER')
    ext {
        name = 'tgm - Die Schule der Technik'
        year = 2020
    }
}

/*tasks.withType(JavaCompile) {
    options.compilerArgs += '--enable-preview'
}

tasks.withType(Test) {
    jvmArgs += "--enable-preview"
}

tasks.bootRun {
    jvmArgs += "--enable-preview"
}*/
